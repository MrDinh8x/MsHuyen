import type { User, Lesson, Assignment, AwardData, BlogPost } from '../types';

// Mock database
let mockStudent: User | null = null;
let mockUnderstandingScore: number | null = null;
let mockAwards: AwardData = {
  cups: 5,
  badges: [
    { name: 'ChƒÉm ch·ªâ', icon: 'üí™', description: 'Ho√†n th√†nh 10 b√†i t·∫≠p' },
    { name: 'T√≤ m√≤', icon: 'üßê', description: 'H·ªèi 20 c√¢u h·ªèi v·ªõi Study Buddy' },
    { name: 'Ng√¥i sao th√°ng', icon: '‚≠ê', description: 'ƒê·∫°t ƒëi·ªÉm cao nh·∫•t l·ªõp' },
  ],
  hasMonthlyCertificate: false,
};
let mockBlogPosts: BlogPost[] = [
  {
    id: 1,
    author: 'Nguy·ªÖn VƒÉn An',
    avatar: 'https://i.pravatar.cc/150?u=a042581f4e29026704d',
    createdAt: '2 ng√†y tr∆∞·ªõc',
    category: 'To√°n h·ªçc',
    title: 'C√°ch gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c hai',
    content: 'H√¥m nay m√¨nh h·ªçc ƒë∆∞·ª£c c√°ch gi·∫£i ph∆∞∆°ng tr√¨nh b·∫≠c hai r·∫•t hay, m√¨nh mu·ªën chia s·∫ª v·ªõi m·ªçi ng∆∞·ªùi...',
    status: 'approved',
  },
  {
    id: 2,
    author: 'Tr·∫ßn Th·ªã B√≠ch',
    avatar: 'https://i.pravatar.cc/150?u=a042581f4e29026704e',
    createdAt: '1 gi·ªù tr∆∞·ªõc',
    category: 'VƒÉn h·ªçc',
    title: 'Ph√¢n t√≠ch nh√¢n v·∫≠t Ch√≠ Ph√®o',
    content: 'Ch√≠ Ph√®o l√† m·ªôt nh√¢n v·∫≠t ph·ª©c t·∫°p, ƒë·∫°i di·ªán cho t·∫ßng l·ªõp n√¥ng d√¢n b·ªã tha h√≥a...',
    status: 'pending',
  },
];
let nextPostId = 3;

// --- MOCK SERVICE FUNCTIONS ---

export const saveStudentData = async (user: User): Promise<void> => {
  console.log('Saving student data:', user);
  mockStudent = user;
  await new Promise(res => setTimeout(res, 500));
};

export const getLessonsForGrade = async (grade: number): Promise<Lesson[]> => {
  console.log(`Fetching lessons for grade ${grade}`);
  await new Promise(res => setTimeout(res, 500));
  // Dummy data
  return [
    { id: `g${grade}_math_1`, grade, subject: 'To√°n h·ªçc', title: 'Ch∆∞∆°ng 1: S·ªë h·ªØu t·ªâ', description: '√în t·∫≠p v·ªÅ s·ªë h·ªØu t·ªâ v√† c√°c ph√©p to√°n.' },
    { id: `g${grade}_lit_1`, grade, subject: 'VƒÉn h·ªçc', title: 'B√†i 1: Truy·ªán ng·∫Øn', description: 'Ph√¢n t√≠ch c√°c t√°c ph·∫©m truy·ªán ng·∫Øn n·ªïi ti·∫øng.' },
    { id: `g${grade}_sci_1`, grade, subject: 'Khoa h·ªçc', title: 'Unit 1: The Cell', description: 'Learn about the basic unit of life.' },
  ];
};

export const getAssignmentForLesson = async (lessonId: string): Promise<Assignment> => {
    console.log(`Fetching assignment for lesson ${lessonId}`);
    await new Promise(res => setTimeout(res, 1000));
    // Dummy data
    return {
        id: `asg_${lessonId}`,
        lessonId,
        questions: [
            {
                question: 'S·ªë h·ªØu t·ªâ l√† g√¨?',
                type: 'mcq',
                options: ['L√† s·ªë vi·∫øt ƒë∆∞·ª£c d∆∞·ªõi d·∫°ng a/b v·ªõi a, b l√† s·ªë nguy√™n, b kh√°c 0', 'L√† s·ªë nguy√™n', 'L√† s·ªë th·∫≠p ph√¢n'],
                correctAnswer: 'L√† s·ªë vi·∫øt ƒë∆∞·ª£c d∆∞·ªõi d·∫°ng a/b v·ªõi a, b l√† s·ªë nguy√™n, b kh√°c 0',
            },
            {
                question: 'So s√°nh hai s·ªë h·ªØu t·ªâ -1/2 v√† -2/3.',
                type: 'open',
                correctAnswer: 'Ta c√≥ -1/2 = -3/6 v√† -2/3 = -4/6. V√¨ -3 > -4 n√™n -3/6 > -4/6, hay -1/2 > -2/3.',
            }
        ]
    };
};

export const saveUnderstandingScore = async (score: number): Promise<void> => {
  console.log('Saving understanding score:', score);
  mockUnderstandingScore = score;
  await new Promise(res => setTimeout(res, 500));
};

export const getUserAwards = async (): Promise<AwardData> => {
  console.log('Fetching user awards');
  await new Promise(res => setTimeout(res, 800));
  return mockAwards;
};

export const awardCup = async (): Promise<void> => {
  console.log('Awarding a cup!');
  mockAwards.cups += 1;
  await new Promise(res => setTimeout(res, 300));
};

export const getBlogPosts = async (): Promise<BlogPost[]> => {
    console.log('Fetching blog posts');
    await new Promise(res => setTimeout(res, 700));
    return [...mockBlogPosts].reverse(); // Newest first
};

export const saveBlogPost = async (postData: Omit<BlogPost, 'id' | 'createdAt' | 'avatar' | 'status'>, user: User): Promise<void> => {
    console.log('Saving blog post:', postData);
    const newPost: BlogPost = {
        ...postData,
        id: nextPostId++,
        createdAt: 'V·ª´a xong',
        avatar: 'https://i.pravatar.cc/150?u=currentuser', // generic avatar for current user
        status: 'pending', // All new posts are pending
    };
    mockBlogPosts.push(newPost);
    await new Promise(res => setTimeout(res, 600));
};

export const approveBlogPost = async (postId: number): Promise<void> => {
    console.log('Approving blog post:', postId);
    const post = mockBlogPosts.find(p => p.id === postId);
    if (post) {
        post.status = 'approved';
    }
    await new Promise(res => setTimeout(res, 400));
};
